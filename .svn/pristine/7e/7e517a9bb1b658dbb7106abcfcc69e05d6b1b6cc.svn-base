import router from "../../router";
import Util from './util';
import { MessageBox } from "element-ui";

export default {
	env() {
		if (process.env.NODE_ENV === "development" || window.location.href.includes('192.168')) return "development";
		if (window.location.href.includes('test-mgr')) return 'test';
		return 'production'
	},
	baseUrl() {
		// return "http://192.168.218.185:8022/";
		if (this.env() === "development") return "http://192.168.218.185:8022/";
		if (this.env() === 'test') return "http://test-api.junjue888.com/";
		return "http://api.junjue888.com/";
	},
	baseUrl2() {
		// return "http://192.168.218.185:8055/";
		if (this.env() === "development") return "http://192.168.218.185:8055/";
		if (this.env() === 'test') return "http://test-crm.junjue888.com/";
		return "http://crm.junjue888.com/";
	},
	ServiceProxy() {
		// return "http://192.168.218.164:20003/ServiceProxy.aspx";
		if (this.env() === "development") return "http://192.168.218.164:20003/ServiceProxy.aspx";
		if (this.env() === 'test') return "http://test-transfer.liulianglf.com/ServiceProxy.aspx";
		return "http://transfer.liulianglf.com/ServiceProxy.aspx";
	},
	_vkcServer: null,
	getVkcServer() {
		if (!this._vkcServer) {
			var servicePara = {
				key: "jbfly",
				containKey: true,
				defExt: "",
				url: this.ServiceProxy()
			};
			if (window["jc"]) {
				this._vkcServer = window["jc"].createService(servicePara);
				//console.log("init jc server", this._vkcServer);
			}
		}
		return this._vkcServer;
	},
	vkcPost(url, data, callback, getAllData) {
		this.getVkcServer()
			.ajax(this.baseUrl() + url, data)
			.done(res => this.vkcBack(res, callback, getAllData));
	},
	vkcPost2(url, data, callback, getAllData) {
		typeof data !== "object" ? (data = {}) : "";
		let userInfo = Util.getLStorage("loanuser", "decode");
		userInfo ? (data.sessionId = userInfo.sessionId) : "";
		this.getVkcServer()
			.ajax(this.baseUrl2() + url, data)
			.done(res => this.vkcBack(res, callback, getAllData));
	},
	vkcBack(res, callback, getAllData) {
		// console.log(res);
		if (res.Code == 100) {
			switch (res.Result.code) {
				case "0": // 0   成功
					if (!getAllData) return callback(res.Result.data);
					return callback(res.Result);
				case "101": // 101 未登录或会话过期
					Util.hideLoading();
					MessageBox.alert(res.Result.msg, {
						showClose: false,
						callback: action => {
							Util.setSStorage('sessionCode', '101');
							MessageBox.close();
							router.push("/login");
						}
					});
					break;
				default:
					// 失败
					Util.hideLoading();
					MessageBox.alert(res.Result.msg, { showClose: false });
					break;
			}
		} else {
			Util.hideLoading();
			MessageBox.alert(res.Msg, { showClose: false });
		}
	},
	jqPost(url, data, callback) {
		// if (url.indexOf("http://") === -1) {
		if (!(url.includes("http://") || url.includes("https://"))) {
			url = this.baseUrl() + url;
		}
		$.ajax({
			type: "POST",
			url: url,
			async: true,
			data: data,
			// data: JSON.stringify(data),
			success: callback,
			error: (data, textStatus, jqXHR) => {
				console.log(textStatus);
			},
			dataType: "json"
		});
	}
};