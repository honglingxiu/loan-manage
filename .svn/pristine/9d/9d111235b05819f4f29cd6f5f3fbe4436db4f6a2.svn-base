<template>
  <div>
    <jb-position></jb-position>
    <el-radio-group v-model="taskType" class="pd-b20" @change="changeColumns">
      <el-radio-button label="callTask">外呼任务</el-radio-button>
      <el-radio-button label="smsTask">短信任务</el-radio-button>
      <el-radio-button label="thirdTask">第三方媒体任务</el-radio-button>
    </el-radio-group>
    <!--这里需要根据后台的接口判断是采用路由还是采用标签显示的形式
    1、如果是同一个接口，则采用标签显示隐藏的方式（可以将columns设置为计算属性，根据taskType来变化）
    2、如果是不同接口，则监视taskType值的变化跳转路由
    目前我先采取标签隐藏的方式，后续具体接口出来再修改路由
    -->
    <div>
      <el-form :inline="true" :model="formData" v-if="taskType=='callTask'||taskType=='smsTask'">
        <el-form-item label="任务创建时间：">
          <el-date-picker
            v-model="formData.createTime"
            type="datetimerange"
            align="right"
            start-placeholder="开始日期"
            end-placeholder="结束日期"
            :default-time="['00:00:00', '23:59:59']"
            @change='handleDate'>
          </el-date-picker>
        </el-form-item>
        <el-form-item label="行业：">
          <el-select v-model="formData.firstTrade" placeholder="全部一级行业">
          </el-select>
          <el-select v-model="formData.secondTrade" placeholder="全部二级行业">
          </el-select>
        </el-form-item>
        <el-form-item label="任务名称：">
          <el-input v-model="formData.taskName" placeholder="请输入任务名称"></el-input>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" @click="getTaskList">查询</el-button>
        </el-form-item>
      </el-form>
      <el-form :inline="true" :model="formData" v-else>
        <el-form-item label="任务启动时间：">
          <el-date-picker
            v-model="formData.runTime"
            type="datetimerange"
            align="right"
            start-placeholder="开始日期"
            end-placeholder="结束日期"
            :default-time="['00:00:00', '23:59:59']"
            @change='handleDate2'>
          </el-date-picker>
        </el-form-item>
        <el-form-item label="行业：">
          <el-select v-model="formData.firstTrade" placeholder="全部一级行业">
          </el-select>
          <el-select v-model="formData.secondTrade" placeholder="全部二级行业">
          </el-select>
        </el-form-item>
        <el-form-item label="任务名称：">
          <el-input v-model="formData.taskName" placeholder="请输入任务名称"></el-input>
        </el-form-item>
        <el-form-item label="任务创建时间：">
          <el-date-picker
            v-model="formData.createTime"
            type="datetimerange"
            align="right"
            start-placeholder="开始日期"
            end-placeholder="结束日期"
            :default-time="['00:00:00', '23:59:59']"
            @change='handleDate'>
          </el-date-picker>
        </el-form-item>
        <el-form-item label="渠道：">
          <el-select v-model="formData.firstChannel" placeholder="全部一级渠道">
          </el-select>
          <el-select v-model="formData.secondChannel" placeholder="全部二级渠道">
          </el-select>
        </el-form-item>
        <el-form-item label="任务状态：">
          <el-select v-model="formData.taskStatus" clearable placeholder="请选择">
          </el-select>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" @click="getTaskList">查询</el-button>
        </el-form-item>
      </el-form>
      <div v-if="taskType=='callTask'">
        <i-table ref="itable" :list="tableLists" :columns="callTaskColumns"
                 :total="totalCount" @handlePageChange="handlePageChange"></i-table>
      </div>
      <div v-else-if="taskType=='smsTask'">
        <i-table ref="itable" :list="tableLists" :columns="smsTaskColumns"
                 :total="totalCount" @handlePageChange="handlePageChange"></i-table>
      </div>
      <div v-else>
        <i-table ref="itable" :list="tableLists" :columns="thirdTaskColumns"
                 :total="totalCount" @handlePageChange="handlePageChange"></i-table>
      </div>
    </div>
  </div>
</template>
<script>
  export default {
    data() {
      return {
        taskType: "callTask",
        formData: {
          createTime:"",//任务创建时间
          runTime:"",//任务启动时间
          taskStartTime:"",//任务开始时间
          taskEndTime:"",//任务结束时间
          startTime: "",
          endTime: "",
          firstTrade: "",
          secondTrade: "",
          taskName: "",
          taskStatus:"",//任务状态
          pageIndex: 1,
          pageSize: 10
        },
        params: {},
        columns:[],
        tableLists:[],
        tableLists1: [
          {
            ID: "100255555",
            taskName: "hlx",
            firstTrade: "honglingxiu",
            secondTrade: "honglingxiu2",
            createTime: "2018-01-25 18:58:56",
            packageName: "qipeipu.apk",
            totalCount: 10000
          }
        ],
        tableLists2:[
          {
            ID: "100255555",
            taskName: "hlx",
            webLink:"http://baidu.com",
            firstTrade: "honglingxiu",
            secondTrade: "honglingxiu2",
            createTime: "2018-01-25 18:58:56",
            packageName: "qipeipu.apk",
            totalCount: 10000
          }
        ],
        tableLists3:[
          {
            ID: "100255555",
            taskName: "hlx",
            webLink:"http://baidu.com",
            firstTrade: "honglingxiu",
            secondTrade: "honglingxiu2",
            taskStatus:"1",
            taskStartTime: "2018-01-25 18:58:56",
            taskEndTime: "2018-01-25 18:58:56",
            firstChannel:"百度信息流",
            secondChannel:"baidux",
            createTime: "2018-01-25 18:58:56",
            packageName: "qipeipu.apk",
            totalCount: 10000
          }
        ],
        totalCount: 1,
        callTaskColumns: [
          {
            prop: 'ID',
            label: '任务ID'
          },
          {
            prop: 'taskName',
            label: '任务名称'
          },
          {
            prop: 'firstTrade',
            label: '一级行业'
          },
          {
            prop: 'secondTrade',
            label: '二级行业'
          },
          {
            prop: 'createTime',
            label: '任务创建时间'
          },
          {
            prop: 'packageName',
            label: '用户包名称'
          },
          {
            prop: 'totalCount',
            label: '用户总数'
          }
          /*{
            label: "编辑",
            showDropMenu: true,
            formatter: () => {
              return '<span style="color: #409EFF">操作</span><i class="el-icon-arrow-down el-icon--right"></i>'
            },
            itemList: [
              {
                label: "查看详情",
                itemCallBack: (row) => {
                  this.$router.push({name:'taskDetail',params:{taskType:this.taskType}});
                }
              },
              {
                label: "推送任务",
                itemCallBack: (row) => {
                }
              },
              {
                label: "反馈数据",
                itemCallBack: (row) => {
                  this.$router.push({name:'feedBackData',params:{taskType:this.taskType}});
                }
              },
              {
                label: "查看日志",
                itemCallBack: (row) => {
                  this.$router.push({name:'logDetail',params:{taskType:this.taskType}});
                }
              }
            ]
          }*/
        ],
        smsTaskColumns: [
          {
            prop: 'ID',
            label: '任务ID'
          },
          {
            prop: 'taskName',
            label: '任务名称'
          },
          {
            prop: 'webLink',
            label: '网页链接',
            formatter: (row) => {
              return `<a target = "_blank" href="${row.webLink}">预览</a>`
            }
          },
          {
            prop: 'firstTrade',
            label: '一级行业'
          },
          {
            prop: 'secondTrade',
            label: '二级行业'
          },
          {
            prop: 'createTime',
            label: '任务创建时间'
          },
          {
            prop: 'packageName',
            label: '用户包名称'
          },
          {
            prop: 'totalCount',
            label: '用户总数'
          }
          /*{
            label: "编辑",
            showDropMenu: true,
            formatter: () => {
              return '<span style="color: #409EFF">操作</span><i class="el-icon-arrow-down el-icon--right"></i>'
            },
            itemList: [
              {
                label: "查看详情",
                itemCallBack: (row) => {
                  this.$router.push({name:'taskDetail',params:{taskType:this.taskType}});
                },
                show: (row) => {
                  return true;
                }
              },
              {
                label: "推送任务",
                itemCallBack: (row) => {
                }
              },
              {
                label: "反馈数据",
                itemCallBack: (row) => {
                  this.$router.push({name:'feedBackData',params:{taskType:this.taskType}});
                }
              },
              {
                label: "查看日志",
                itemCallBack: (row) => {
                  this.$router.push({name:'logDetail',params:{taskType:this.taskType}});
                }
              }
            ]
          }*/
        ],
        thirdTaskColumns: [
          {
            prop: 'ID',
            label: '任务ID'
          },
          {
            prop: 'taskName',
            label: '任务名称'
          },
          {
            prop: 'webLink',
            label: '网页链接',
            formatter: (row) => {
              return `<a target = "_blank" href="${row.webLink}">预览</a>`
            }
          },
          {
            prop: 'firstTrade',
            label: '一级行业'
          },
          {
            prop: 'secondTrade',
            label: '二级行业'
          },
          {
            prop: 'taskStatus',
            label: '任务状态',
            showDropMenu: true,
            formatter: (row) => {
              if(row.taskStatus==1){//状态为启动状态
                return '<span style="color: #409EFF">已启动</span><i class="el-icon-arrow-down el-icon--right"></i>'
              }else{
                return '<span style="color: #409EFF">已暂停</span><i class="el-icon-arrow-down el-icon--right"></i>'
              }
            },
            itemList: [
              {
                label: "启动任务",
                itemCallBack: (row) => {
                  console.log(123);
                },
                show: (row) => {
                  if(row.taskStatus==0){
                    return true;
                  }else {
                    return false;
                  }
                }
              },
              {
                label: "暂停任务",
                itemCallBack: (row) => {
                  console.log(123);
                },
                show: (row) => {
                  if(row.taskStatus==1){
                    return true;
                  }else {
                    return false;
                  }
                }
              }
            ]
          },
          {
            prop: 'taskStartTime',
            label: '任务开始时间'
          },
          {
            prop: 'taskEndTime',
            label: '任务结束时间'
          },
          {
            prop: 'firstChannel',
            label: '一级渠道'
          },
          {
            prop: 'secondChannel',
            label: '二级渠道'
          },
          {
            prop: 'createTime',
            label: '任务创建时间'
          },
          {
            prop: 'packageName',
            label: '用户包名称'
          },
          {
            prop: 'totalCount',
            label: '用户总数'
          }
          /*{
            label: "编辑",
            showDropMenu: true,
            formatter: () => {
              return '<span style="color: #409EFF">操作</span><i class="el-icon-arrow-down el-icon--right"></i>'
            },
            itemList: [
              {
                label: "查看详情",
                itemCallBack: (row) => {
                  this.$router.push({name:'taskDetail',params:{taskType:this.taskType}});
                }
              },
              {
                label: "推送任务",
                itemCallBack: (row) => {
                }
              },
              {
                label: "反馈数据",
                itemCallBack: (row) => {
                  this.$router.push({name:'feedBackData',params:{taskType:this.taskType}});
                }
              },
              {
                label: "查看日志",
                itemCallBack: (row) => {
                  this.$router.push({name:'logDetail',params:{taskType:this.taskType}});
                }
              }
            ]
          }*/
        ]
      }
    },
    computed: {
      /*columns() {
        if (this.taskType == "smsTask") {
          this.params = {};//设置查询参数
          this.formData=this.$options.data().formData;//重置表单
          this.getTaskList();
          return this.smsTaskColumns;
        } else if (this.taskType == "thirdTask") {
          this.params = {};
          this.formData=this.$options.data().formData;//重置表单
          this.getTaskList();
          return this.thirdTaskColumns;
        } else {
          this.params = {};
          this.formData=this.$options.data().formData;//重置表单
          this.getTaskList();
          return this.callTaskColumns;
        }
      }*/
    },
    methods: {
      getTaskList() {
        if (this.taskType == "smsTask") {
          this.params = {};//设置查询参数,将formData对应的字段赋值
          this.tableLists=this.tableLists2;
        } else if (this.taskType == "thirdTask") {
          this.params = {};
          this.tableLists=this.tableLists3;
        } else {
          this.params = {};
          this.tableLists=this.tableLists1;
        }
      },
      changeColumns(){
        this.formData=this.$options.data().formData;//重置表单
      /*  if (this.taskType == "smsTask") {//切换标签的时候需要重新设置列值
          this.columns=this.smsTaskColumns;
        } else if (this.taskType == "thirdTask") {
          this.columns=this.thirdTaskColumns;
        } else {
          this.columns=this.callTaskColumns;
        }*/
        this.getTaskList();
      },
      handleDate(dateArr) {
        if (!dateArr) {
          this.formData.startTime = this.formData.endTime = '';
        } else {
          this.formData.startTime = dateArr[0] + ' 00:00:00';
          this.formData.endTime = dateArr[1] + ' 23:59:59';
        }
      },
      handleDate2(dateArr) {
        if (!dateArr) {
          this.formData.taskStartTime = this.formData.taskEndTime = '';
        } else {
          this.formData.taskStartTime = dateArr[0] + ' 00:00:00';
          this.formData.taskEndTime = dateArr[1] + ' 23:59:59';
        }
      },
      handlePageChange(pagination) {
        this.formData.pageIndex = (pagination.Pcurrent - 1) * pagination.Psizes + 1;
        this.formData.pageSize = pagination.Psizes;
        this.getTaskList();
      }
    },
    created(){
      this.taskType=this.$route.params['taskType']||"callTask";
      var obj={
        label: "编辑",
        showDropMenu: true,
        formatter: () => {
          return '<span style="color: #409EFF">操作</span><i class="el-icon-arrow-down el-icon--right"></i>'
        },
        itemList: [
          {
            label: "查看详情",
            itemCallBack: (row) => {
              this.$router.push({path:'/putinTaskList/taskRelated/taskDetail',query:{taskType:this.taskType,tagType:"taskDetail"}});
            }
          },
          {
            label: "推送任务",
            itemCallBack: (row) => {
            }
          },
          {
            label: "反馈数据",
            itemCallBack: (row) => {
              this.$router.push({path:'/putinTaskList/taskRelated/feedBackData',query:{taskType:this.taskType,tagType:"feedBackData"}});
            }
          },
          {
            label: "查看日志",
            itemCallBack: (row) => {
              this.$router.push({path:'/putinTaskList/taskRelated/logDetail',query:{taskType:this.taskType,tagType:"logDetail"}});
            }
          }
        ]
      };
      this.callTaskColumns.push(obj);
      this.smsTaskColumns.push(obj);
      this.thirdTaskColumns.push(obj);
      this.getTaskList();
    }
  }
</script>
<style scoped>
  .editList {
    position: fixed;
    left: 0;
    top: 0;
    display: block;
  }
</style>
